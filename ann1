import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import time

# Load MNIST dataset
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])
trainset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)
testset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)

trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)
testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=False)

# Define CNN model
class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.fc1 = nn.Linear(64 * 7 * 7, 128)
        self.fc2 = nn.Linear(128, 10)
        self.pool = nn.MaxPool2d(2, 2)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.pool(self.relu(self.conv1(x)))
        x = self.pool(self.relu(self.conv2(x)))
        x = x.view(-1, 64 * 7 * 7)
        x = self.relu(self.fc1(x))
        return self.fc2(x)

# Define Sai Net model with adaptive weight adjustment
class SaiLayer(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size):
        super(SaiLayer, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size, padding=1)
        self.adaptive_weight = nn.Parameter(torch.randn(out_channels, in_channels, kernel_size, kernel_size) * 0.1)

    def forward(self, x):
        weight_update = torch.sigmoid(self.adaptive_weight)  # Î¨-adaptation
        return torch.relu(self.conv(x) * weight_update)

class SaiNet(nn.Module):
    def __init__(self):
        super(SaiNet, self).__init__()
        self.sai1 = SaiLayer(1, 32, 3)
        self.sai2 = SaiLayer(32, 64, 3)
        self.fc1 = nn.Linear(64 * 7 * 7, 128)
        self.fc2 = nn.Linear(128, 10)
        self.pool = nn.MaxPool2d(2, 2)

    def forward(self, x):
        x = self.pool(self.sai1(x))
        x = self.pool(self.sai2(x))
        x = x.view(-1, 64 * 7 * 7)
        x = torch.relu(self.fc1(x))
        return self.fc2(x)

# Training function
def train_model(model, optimizer, criterion, epochs=10):
    model.train()
    train_acc, train_loss = [], []
    start_time = time.time()

    for epoch in range(epochs):
        correct, total, running_loss = 0, 0, 0.0
        for images, labels in trainloader:
            images, labels = images.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

        epoch_acc = 100 * correct / total
        epoch_loss = running_loss / len(trainloader)
        train_acc.append(epoch_acc)
        train_loss.append(epoch_loss)

        print(f"Epoch {epoch+1}: Accuracy={epoch_acc:.2f}%, Loss={epoch_loss:.4f}")

    total_time = time.time() - start_time
    return train_acc, train_loss, total_time

# Evaluation function
def evaluate_model(model):
    model.eval()
    correct, total = 0, 0
    with torch.no_grad():
        for images, labels in testloader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    return 100 * correct / total

# Device setup
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
cnn_model = CNN().to(device)
sai_model = SaiNet().to(device)

# Training CNN
print("\nTraining CNN...")
cnn_optimizer = optim.Adam(cnn_model.parameters(), lr=0.001)
criterion = nn.CrossEntropyLoss()
cnn_acc, cnn_loss, cnn_time = train_model(cnn_model, cnn_optimizer, criterion)

# Training Sai Net
print("\nTraining Sai Net...")
sai_optimizer = optim.Adam(sai_model.parameters(), lr=0.001)
sai_acc, sai_loss, sai_time = train_model(sai_model, sai_optimizer, criterion)

# Evaluating models
cnn_test_acc = evaluate_model(cnn_model)
sai_test_acc = evaluate_model(sai_model)

# Print results
print(f"\nCNN Test Accuracy: {cnn_test_acc:.2f}%")
print(f"Sai Net Test Accuracy: {sai_test_acc:.2f}%")
print(f"\nCNN Training Time: {cnn_time:.2f} sec")
print(f"Sai Net Training Time: {sai_time:.2f} sec")

# Plot comparison
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.plot(cnn_acc, label='CNN Accuracy')
plt.plot(sai_acc, label='Sai Net Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.title('CNN vs Sai Net - Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(cnn_loss, label='CNN Loss')
plt.plot(sai_loss, label='Sai Net Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('CNN vs Sai Net - Loss')
plt.legend()

plt.tight_layout()
plt.show()
