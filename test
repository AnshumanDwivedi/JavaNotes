import os
import pickle
from collections import defaultdict

class MultiValueHybridCache:
    def __init__(self, capacity, cache_dir):
        self.capacity = capacity
        self.cache_dir = cache_dir
        self.cache = defaultdict(list)
        if not os.path.exists(cache_dir):
            os.makedirs(cache_dir)

    def get(self, key):
        if key in self.cache:
            return self.cache[key]
        else:
            file_path = os.path.join(self.cache_dir, str(key))
            if os.path.exists(file_path):
                with open(file_path, 'rb') as f:
                    value = pickle.load(f)
                    # Cache the value in memory
                    self.cache[key] = value
                    return value
            else:
                return None

    def put(self, key, values):
        if len(self.cache) >= self.capacity:
            # Evict least recently used item
            self.evict_lru()

        self.cache[key] = values

        # Persist to file system
        file_path = os.path.join(self.cache_dir, str(key))
        with open(file_path, 'wb') as f:
            pickle.dump(values, f)

    def evict_lru(self):
        # Evict least recently used item from memory and file system
        if self.cache:
            lru_key = next(iter(self.cache))
            del self.cache[lru_key]
            file_path = os.path.join(self.cache_dir, str(lru_key))
            if os.path.exists(file_path):
                os.remove(file_path)

# Example usage:
cache = MultiValueHybridCache(2, 'cache_data')
cache.put(1, ['a', 'b'])
cache.put(2, ['c', 'd'])
print(cache.get(1))  # Output: ['a', 'b'] (cached in memory)
print(cache.get(2))  # Output: ['c', 'd'] (cached in memory)

# Add new item, evicts least recently used item (key 1) to file system
cache.put(3, ['e', 'f'])
print(cache.get(1))  # Output: None (evicted from memory and file system)
print(cache.get(3))  # Output: ['e', 'f'] (cached in memory)
